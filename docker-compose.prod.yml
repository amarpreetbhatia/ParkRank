version: '3.8'

# Production Docker Compose with enhanced security and performance
services:
  postgres:
    image: postgres:15-alpine
    container_name: nps-rank-db-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nps_rank}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - nps-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-nps_rank}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Don't expose ports in production - only internal network access
    
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: nps-rank-app-prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-nps_rank}
      - PORT=5000
      - HOST=0.0.0.0
    ports:
      - "${APP_PORT:-5000}:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nps-network
    volumes:
      - ./logs:/app/logs:rw
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/statistics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Security enhancements
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges:true

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: nps-rank-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - nps-network
    restart: always
    profiles:
      - with-nginx

networks:
  nps-network:
    driver: bridge
    internal: false

volumes:
  postgres_prod_data:
    driver: local